{"version":3,"sources":["utils/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","data-testid","href","target","timestamp","seconds","Math","floor","Date","interval","mapTime","StoriesContainer","storyIds","setStoryIds","style","backgroundColor","textAlign","alignItems","fontFamily","fontSize","border","map","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uPACaA,EAAe,wEAAgC,GAA7BC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,IAAKC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MAAtB,MAAwC,CAClEJ,KACAC,KACAC,MACAC,OACAC,UCHWC,EAAU,yCACVC,EAAa,UAAMD,EAAN,mBACbE,EAAQ,UAAMF,EAAN,SAERG,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACDC,IAClBC,IADkB,UACXL,EAAWE,EADA,UAElBI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcA,GAAQf,EAAae,MAHrB,cAChBC,EADgB,yBAKfA,GALe,2CAAH,sDAQRC,EAAW,uCAAG,4BAAAN,EAAA,sEACJC,IAAMC,IAAIN,GAAeO,MAAK,qBAAGC,QAD7B,cACnBC,EADmB,yBAGlBA,GAHkB,2CAAH,qD,+hCCbjB,IAAME,EAAeC,IAAOC,QAAV,KAgBZC,EAAaF,IAAOG,GAAV,KAoBVC,EAAYJ,IAAOK,IAAV,KAaTC,EAAmBN,IAAOO,KAAV,KAElB,SAACC,GAAD,OAAWA,EAAMC,OAAS,SC1CxBC,EAAQ,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,QAAc,EACVoB,mBAAS,IADC,mBAC7BC,EAD6B,KACtBC,EADsB,KAOpC,OAJAC,qBAAU,WACRxB,EAASC,GAASI,MAAK,SAACC,GAAD,OAAUA,GAAQA,EAAKZ,KAAO6B,EAASjB,QAC7D,IAEIgB,GAASA,EAAM5B,IACpB,kBAACe,EAAD,CAAcgB,cAAY,SACxB,kBAACb,EAAD,KACE,uBAAGc,KAAMJ,EAAM5B,IAAKiC,OAAO,UACxBL,EAAM1B,QAGX,kBAACkB,EAAD,KACE,0BAAMW,cAAY,YAChB,kBAACT,EAAD,CAAkBG,MAAM,QAAxB,QADF,IAC0DG,EAAM7B,IAEhE,0BAAMgC,cAAY,cAChB,kBAACT,EAAD,CAAkBG,MAAM,QAAxB,YC9Ba,SAACS,GACtB,IAAMC,EAAUC,KAAKC,OAAO,IAAIC,KAAqB,IAAZJ,GAAoB,KAEzDK,EAAWH,KAAKC,MAAMF,EAAU,SAEpC,OAAII,EAAW,EACP,IAAN,OAAWA,EAAX,eAEFA,EAAWH,KAAKC,MAAMF,EAAU,SAEjB,EACP,IAAN,OAAWI,EAAX,gBAEFA,EAAWH,KAAKC,MAAMF,EAAU,QAEjB,EACP,IAAN,OAAWI,EAAX,cAEFA,EAAWH,KAAKC,MAAMF,EAAU,OAEjB,EACP,IAAN,OAAWI,EAAX,eAEFA,EAAWH,KAAKC,MAAMF,EAAU,KAEjB,EACP,GAAN,OAAUI,EAAV,gBAGI,IAAN,OAAWH,KAAKC,MAAMF,GAAtB,gBDESK,CAAQZ,EAAM3B,SAInB,ME9BOwC,G,MAAmB,WAAO,IAAD,EACJd,mBAAS,IADL,mBAC7Be,EAD6B,KACnBC,EADmB,KAapC,OATAb,qBAAU,WACRhB,IAAcH,MAAK,SAACC,GAAD,OAAU+B,EAAY/B,QAExC,IAQD,0BACEgC,MAAO,CACLC,gBAAiB,YAGnB,wBACED,MAAO,CACLE,UAAW,SACXC,WAAY,SACZC,WAAY,OACZC,SAAU,OACVxB,MAAO,OACPyB,OAAQ,oBACRL,gBAAiB,SARrB,uBAaCH,EAASS,KAAI,SAAC5C,GAAD,OACZ,kBAAC,EAAD,CAAO6C,IAAK7C,EAASA,QAASA,UCpCzB8C,EAAM,kBAAM,kBAAC,EAAD,OCSnBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlD,MAAK,SAAAuD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiBjC,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,cAAwB3B,OAAOC,SAASzB,MACpDoD,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,cAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B5E,MAAK,SAAA6E,GAEJ,IAAMC,EAAcD,EAASD,QAAQ7E,IAAI,gBAEnB,MAApB8E,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMjF,MAAK,SAAAuD,GACjCA,EAAa2B,aAAalF,MAAK,WAC7B6C,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMjF,MAAK,WACjC8D,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC3C/BE,K","file":"static/js/main.8d964afc.chunk.js","sourcesContent":["// the \"} = {}\" means that there are no empty fiels / not null\nexport const selectFields = ({ id, by, url, time, title } = {}) => ({\n  id,\n  by,\n  url,\n  time,\n  title,\n});\n","import axios from \"axios\";\nimport { selectFields } from \"../utils/selectFields\";\n\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0/\";\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`;\n\nexport const getStory = async (storyId) => {\n  const result = await axios\n    .get(`${storyUrl + storyId}.json`)\n    .then(({ data }) => data && selectFields(data));\n  // the line about means if you have data && is not null\n  return result;\n};\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(newStoriesUrl).then(({ data }) => data);\n\n  return result;\n};\n","import styled from \"styled-components\";\n\nexport const StoryWrapper = styled.section`\n  padding: 10px 15px;\n  margin-botton: 20px;\n  border-top: 1px solid #cccccc;\n  background-color: #f8fafb;\n\n  &:first-of-type {\n    border-top: 0;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-decoration: none;\n\n  a {\n    color: #0d6ca3;\n    font-size: 22px;\n    background-color: #edf5f7;\n    text-decoration: none;\n\n    &:hover {\n      color: #dec93e;\n      font-size: 24px;\n    }\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n\n  > span:not(:first-child):before {\n    content: \"ðŸ šðŸ šðŸ š\";\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: bold;\n  color: ${(props) => props.color || \"red\"};\n`;\n","// eslint-disable react-hooks/exhaustive-deps\nimport React, { useState, useEffect } from \"react\";\nimport { getStory } from \"../services/hnApi\";\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement,\n} from \"../styles/StoryStyles\";\nimport { mapTime } from \"../mappers/mapTime\";\n\nexport const Story = ({ storyId }) => {\n  const [story, setStory] = useState({});\n\n  useEffect(() => {\n    getStory(storyId).then((data) => data && data.url && setStory(data));\n  }, []);\n\n  return story && story.url ? (\n    <StoryWrapper data-testid=\"story\">\n      <StoryTitle>\n        <a href={story.url} target=\"_blank\">\n          {story.title}\n        </a>\n      </StoryTitle>\n      <StoryMeta>\n        <span data-testid=\"story-by\">\n          <StoryMetaElement color=\"#000\">By: </StoryMetaElement> {story.by}\n        </span>\n        <span data-testid=\"story-time\">\n          <StoryMetaElement color=\"#000\">Posted: </StoryMetaElement>\n          {mapTime(story.time)}\n        </span>\n      </StoryMeta>\n    </StoryWrapper>\n  ) : null;\n};\n","export const mapTime = (timestamp) => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return ` ${interval} years ago`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return ` ${interval} months ago`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return ` ${interval} days ago`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return ` ${interval} hours ago`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes ago`;\n  }\n\n  return ` ${Math.floor(seconds)} seconds ago`;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { getStoryIds } from \"../services/hnApi\";\nimport { Story } from \"../components/Story\";\nimport \"../styles/style.css\";\n\nexport const StoriesContainer = () => {\n  const [storyIds, setStoryIds] = useState([]);\n\n  //   \".then\" resolves the promise, which comes from \"async\" in hnApi.js.\n  useEffect(() => {\n    getStoryIds().then((data) => setStoryIds(data));\n    // getStory(20970623).then((data) => console.log(data));\n  }, []);\n\n  //   [] = when the component mounts, do this...\n  //   [storyIdsUpdated (true/false)]\n  //  With [], it runs just once, because it's an empty array.\n\n  return (\n    //   \"<>\" is a fragment so you could use multiple children - not JUST ONE\n    <body\n      style={{\n        backgroundColor: \"#F8FAFB\",\n      }}\n    >\n      <h1\n        style={{\n          textAlign: \"center\",\n          alignItems: \"center\",\n          fontFamily: \"B612\",\n          fontSize: \"48px\",\n          color: \"#fff\",\n          border: \"1px solid #bfbb80\",\n          backgroundColor: \"#000\",\n        }}\n      >\n        Hacker News Stories\n      </h1>\n      {storyIds.map((storyId) => (\n        <Story key={storyId} storyId={storyId} />\n      ))}\n    </body>\n  );\n};\n","import React from \"react\";\nimport { StoriesContainer } from \"./containers/StoriesContainer\";\n\nexport const App = () => <StoriesContainer />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nrender(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}